from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

BOT_TOKEN = '8221559500:AAEcJyUH8_h7CtQhlcXzchuaqu28rBVwqLI'  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
OWNER_ID = 870514707           # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—ã–±–æ—Ä —Ü–µ–ª–µ–π
purpose_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
purpose_keyboard.add(
    KeyboardButton("üîÅ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"),
    KeyboardButton("üõçÔ∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"),
    KeyboardButton("üì© –†–∞—Å—Å—ã–ª–∫–∞"),
)
purpose_keyboard.add(
    KeyboardButton("üìù –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫"),
    KeyboardButton("‚öôÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–∞/–Ω–µ—Ç
payment_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
payment_keyboard.add(
    KeyboardButton("‚úÖ –î–∞, –Ω—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞"),
    KeyboardButton("‚ùå –ù–µ—Ç, –±–µ–∑ –æ–ø–ª–∞—Ç—ã")
)


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞.\n\n–í—ã–±–µ—Ä–∏, –¥–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω –±–æ—Ç:",
        reply_markup=purpose_keyboard
    )
    await bot.send_message(
        OWNER_ID,
        f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞."
    )


@dp.message_handler(lambda msg: msg.text in [
    "üîÅ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫", "üõçÔ∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "üì© –†–∞—Å—Å—ã–ª–∫–∞", "üìù –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫", "‚öôÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
])
async def handle_purpose(message: types.Message):
    purpose = message.text
    await message.answer("üí≥ –ù—É–∂–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞?", reply_markup=payment_keyboard)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    user_data[message.from_user.id] = {'purpose': purpose}

user_data = {}


@dp.message_handler(lambda msg: msg.text in ["‚úÖ –î–∞, –Ω—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞", "‚ùå –ù–µ—Ç, –±–µ–∑ –æ–ø–ª–∞—Ç—ã"])
async def handle_payment_choice(message: types.Message):
    payment = message.text
    user_id = message.from_user.id
    data = user_data.get(user_id, {})
    purpose = data.get('purpose', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")

    await bot.send_message(
        OWNER_ID,
        f"üì¨ –ó–∞—è–≤–∫–∞ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'}\n"
        f"üÜî ID: {user_id}\n"
        f"üéØ –¶–µ–ª—å –±–æ—Ç–∞: {purpose}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞ –≤ –±–æ—Ç–µ: {'–î–∞' if '–î–∞' in payment else '–ù–µ—Ç'}"
    )


@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ üëá")


if __name__ == '__main__':
    print("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù")
    executor.start_polling(dp, skip_updates=True)